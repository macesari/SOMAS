function [version,patient,recording,startDate,startTime,headerBytes,...
    reserve,numDataRecords,dataRecordDuration,numSignals,...
    sigLabels,transducerType,physicalDimension,physicalMinimum,...
    physicalMaximum,digitalMinimum,digitalMaximum,prefilter,...
    numSamples,sigReserve,data,annotations,rawAnnotations,...
    annotationsProperties,fileType,dataRecordTimes] = ...
    m_edfinfo(funName,fid,filename,fileInfo,preserveFlag)
%edfinfo reads header details, signal data and annotations present in the
%EDF/EDF+ files
%
%   This function is for internal use only. It may change or be removed.

%   Copyright 2020 The MathWorks, Inc.

try
    % Read the Header details
    [version, patient, recording, startDate, startTime, headerBytes,...
        reserve, numDataRecords, dataRecordDuration, numSignals,...
        sigLabels, transducerType, physicalDimension, physicalMinimum,...
        physicalMaximum, digitalMinimum, digitalMaximum, prefilter,...
        numSamples, sigReserve] = signal.internal.edf.readHeader(fid);
catch
    error(message('signal:edf:EDFFileNotCompliant', filename));
end

% Validate EDF/EDF+ files
signal.internal.edf.validateEDF(filename, fileInfo, version,...
    startDate, startTime, headerBytes, reserve, numDataRecords,...
    numSignals,sigLabels, numSamples, transducerType,...
    physicalDimension, physicalMinimum, physicalMaximum,...
    digitalMinimum, digitalMaximum, prefilter, sigReserve,...
    dataRecordDuration, mfilename, false);

[rawAnnotations, data] = getData(funName, fid, filename,...
    sigLabels, numDataRecords, physicalMaximum, physicalMinimum, ...
    digitalMaximum, digitalMinimum, numSignals, numSamples,...
    dataRecordDuration);

% Check for annotations
annotationsIdx = find((sigLabels == "EDF Annotations"),1);
annotationsIdxFlag = ~isempty(annotationsIdx);
fileType = "EDF";
if (annotationsIdxFlag)
    [dataRecordTimes, onset, annotations, tempDuration] = ...
        my_readAnnotations(rawAnnotations);
    tOnsetFlag = isempty(onset); 
    tAnnotationsFlag = isempty(annotations);
    tDurationFlag = isempty(tempDuration);
    if tOnsetFlag && tAnnotationsFlag && tDurationFlag
        tAnnotations = timetable(duration.empty(0,1), [], ...
            duration.empty(0,1), 'VariableNames', ["Annotations", ...
            "Duration"]);
    elseif ~tOnsetFlag && ~tAnnotationsFlag && ~tDurationFlag
        tAnnotations = timetable(onset, annotations, tempDuration, ...
            'VariableNames', ["Annotations", "Duration"]);
    else
        error(message('signal:edf:EDFFileNotCompliant', filename));
    end
    % Remove references of annotations from remaining header
    [annotationsProperties, sigLabels, transducerType, physicalDimension, ...
        physicalMinimum, physicalMaximum, digitalMinimum, digitalMaximum, ...
        prefilter, numSamples, sigReserve, numSignals] = ...
        modifyAnnotationsProperties(sigLabels, transducerType, ...
        physicalDimension, physicalMinimum, physicalMaximum, ...
        digitalMinimum, digitalMaximum, prefilter, ...
        numSamples, sigReserve, numSignals, annotationsIdx, preserveFlag);
    
    if ~strcmpi(funName,'edfinfo') && ~isempty(data)
        data(:,end) = [];
    end
    
    if ~isempty(reserve)
        fileType = "EDF+";
    end
else
    tAnnotations = timetable(duration.empty(0,1),...
        [],duration.empty(0,1), 'VariableNames',...
        ["Annotations", "Duration"]);
    annotationsProperties = {};
    dataRecordTimes = ...
        seconds(signal.internal.edf.write.checkDataRecordTimes(reserve, [], ... 
    dataRecordDuration, numDataRecords, 'edfinfo'));
end
tAnnotations.Properties.DimensionNames{1} = 'Onset';

if ~issortedrows(tAnnotations)
    annotations = sortrows(tAnnotations);
else
    annotations = tAnnotations;
end
end

function [rawAnnotations,data] = getData(funName,fid,filename,...
    sigLabels,numDataRecords,physicalMaximum,physicalMinimum, ...
    digitalMaximum,digitalMinimum,numSignals,numSamples,...
    dataRecordDuration)

% Read annotations and data from EDF files
if (dataRecordDuration == 0) || strcmpi(funName,'edfinfo')
    % Read only annotations when dataRecordDuration is 0 which is supported
    % only in EDF+ files
    [rawAnnotations,data] = signal.internal.edf.readData(fid, filename,...
        sigLabels, numDataRecords, physicalMaximum, physicalMinimum, ...
        digitalMaximum, digitalMinimum, numSignals, numSamples,...
        [], [], dataRecordDuration, true, false);
else
    records = 1:numDataRecords;
    signalsIdx = 1:numSignals;
    % Read annotations and data for non-zero dataRecordDuration
    [rawAnnotations,data] = signal.internal.edf.readData(fid, filename,...
        sigLabels, numDataRecords, physicalMaximum, physicalMinimum, ...
        digitalMaximum, digitalMinimum, numSignals, numSamples,...
        signalsIdx, records, dataRecordDuration, false, false);
end
end

function [annotationsProperties,sigLabels,transducerType,physicalDimension,...
    physicalMinimum,physicalMaximum,digitalMinimum,digitalMaximum,prefilter,...
    numSamples,sigReserve,numSignals] = ...
    modifyAnnotationsProperties(sigLabels,transducerType,...
    physicalDimension,physicalMinimum,physicalMaximum,...
    digitalMinimum,digitalMaximum,prefilter,...
    numSamples,sigReserve,numSignals,annotationsIdx,preserveFlag)

tSigLabels = sigLabels(annotationsIdx);
tTransducerType = transducerType(annotationsIdx);
tPhysicalDimension = physicalDimension(annotationsIdx);
tPhysicalMinimum = physicalMinimum(annotationsIdx);
tPhysicalMaximum = physicalMaximum(annotationsIdx);
tDigitalMinimum = digitalMinimum(annotationsIdx);
tDigitalMaximum = digitalMaximum(annotationsIdx);
tPrefilter = prefilter(annotationsIdx);
tNumSamples = numSamples(annotationsIdx);
tSigReserve = sigReserve(annotationsIdx);
tNumSignals = numSignals - 1;

if preserveFlag
    annotationsProperties = {tSigLabels,tTransducerType,tPhysicalDimension,...
        tPhysicalMinimum,tPhysicalMaximum,tDigitalMinimum,tDigitalMaximum,...
        tPrefilter,tNumSamples,tSigReserve,tNumSignals};
else
    annotationsProperties = {};
end

sigLabels(annotationsIdx) = [];
transducerType(annotationsIdx) = [];
physicalDimension(annotationsIdx) = [];
physicalMinimum(annotationsIdx) = [];
physicalMaximum(annotationsIdx) = [];
digitalMinimum(annotationsIdx) = [];
digitalMaximum(annotationsIdx) = [];
prefilter(annotationsIdx) = [];
numSamples(annotationsIdx) = [];
sigReserve(annotationsIdx) = [];
numSignals = tNumSignals;

end
